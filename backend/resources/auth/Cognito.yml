Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: user-pool-${self:provider.stage}
      AliasAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          RequireLowercase: true
          TemporaryPasswordValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: user-pool-client-${self:provider.stage}
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      UserPoolId:
        Ref: CognitoUserPool
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
      CallbackURLs:
        - http://localhost:3000
  AdminUserPoolGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: "admins"
      Precedence: 0
      UserPoolId: !Ref CognitoUserPool
  VisitorUserPoolGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: "visitors"
      Precedence: 1
      UserPoolId: !Ref CognitoUserPool
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      # CustomDomainConfig:
      #   CertificateArn: arn:aws:acm:us-east-1:948552327195:certificate/320c2552-4ea2-4463-9535-95127c206961
      Domain: litethinking-${self:provider.stage}
      UserPoolId:
        Ref: CognitoUserPool
